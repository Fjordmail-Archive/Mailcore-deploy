#!/bin/bash
set -e		# Abort upon error
#set -x		# Print every command to stdout

# Roundcube branch to deploy
readonly CONFIG_BRANCH="1.5"

#######################################
#	See README.me
#	Supports Wemail.no, Sol.dk and Mailia.no
#		./deploy app.wemail.no
#	Arguments:
#		destination (string): RC root's dir name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function main() {
	local readonly USAGE="Usage: ./deploy destination"

	if [ "${#}" -ne 1 ]; then
		err "Error: one argument expected, ${#} received"
		err "${USAGE}"
		return 1
	fi

	local readonly dest="${1}"

	# Make sure we have a config file available
	if [[ ! -f "config/${dest}/config.inc.php" ]]; then
		err "Error: config file 'config/${dest}/config.inc.php' does not exist"
		return 2
	fi

	# Fetch skin, either from 'config.inc.php' or from 'custom.inc.php'. If none is found: abort
	for f in config custom; do
		# Get skin from $f.inc.php
		[[ -f "config/${dest}/${f}.inc.php" ]] && \
			local readonly temp=$(cat "config/${dest}/${f}.inc.php" | grep "'skin'" | cut -d"'" -f4)

		# If temp is not empty, use it
		[[ ! -z "${temp}" ]] && \
			local readonly skin="${temp}"
	done

	[[ -z "${skin}" ]] && err "Error: Unable to find skin in config" && return 3

	# Proceed to update
	echo -e "UPDATING WEBMAIL: ${dest}\n"

	# Fetch/update webmail
	get_rc "${dest}" "${skin}"
	get_skin "${dest}"
	get_lang "${dest}"

	# Fetch/update plugins
	get_plugin "${dest}" RC-Plugin-wblist
	get_plugin "${dest}" RC-Plugin-spamlevel
	get_plugin "${dest}" RC-Plugin-mailcore_loglogin
	get_raim "${dest}"
	get_recurrent "${dest}"
	get_plugin "${dest}" RC-Plugin-managesieve

	# Fix custom managesieve
	[[ -d "repos/RC-Plugin-managesieve-${dest}" ]] && rm -rf "repos/RC-Plugin-managesieve-${dest}"
	ln -s "elastic" "repos/RC-Plugin-managesieve/skins/${skin}"
	ln -s "../../config/${dest}/managesieve.conf" repos/RC-Plugin-managesieve/config.inc.php
	mv "repos/RC-Plugin-managesieve" "repos/RC-Plugin-managesieve-${dest}"
	rm "${dest}/plugins/managesieve"
	ln -s "../../repos/RC-Plugin-managesieve-${dest}" "${dest}/plugins/managesieve"

	# mailcore_loglogin config
	[[ ! -L "${dest}/plugins/mailcore_loglogin/config.inc.php" ]] && ln -s ../../config/mailcore_loglogin.php "${dest}/plugins/mailcore_loglogin/config.inc.php"

	# Fix permissions
	sudo chown -R www-data:www-data "${dest}" config/ repos/
	sudo chmod -R ug+rw "${dest}" config/ repos/

	return 0
}

#######################################
#	Check if current RoundCube if up to date
#	If not: delete and fetch latest release
#
#	Arguments:
#		dest (string): rc_root name
#		skin (string): name of skin
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_rc() {
	if [ "${#}" -ne 2 ]; then
		err "Error: missing arguments"
		err "Usage: get_rc dest skin"
		return 1
	fi

	local readonly dest="${1}"
	local readonly skin="${2}"

	echo "Updating Roundcube:"

	# Backup current RC
	[[ -d "${dest}" ]] && mv "${dest}" "${dest}.bak-$(date +'%Y-%m-%d--%H-%M')"

	# Find latest RC release and remove installer/, config/
	local readonly dl_url="$(curl --silent "https://api.github.com/repos/roundcube/roundcubemail/releases/latest" | jq --raw-output '.assets[2].browser_download_url')"
	curl -L "${dl_url}" --output rc.tar.gz
	mkdir "${dest}" && tar -xzf rc.tar.gz -C "${dest}" --strip-components=1
	rm -rf rc.tar.gz "${dest}/installer" "${dest}/config"

	# Fetch RC config
	ln -s "../config/${dest}/" "${dest}/config"

	# Fetch third-party plugin
	git clone https://github.com/sblaisot/automatic_addressbook.git "${dest}/plugins/automatic_addressbook"
	git clone -b release-0.3 https://github.com/johndoh/roundcube-swipe.git "${dest}/plugins/swipe"
	ln -s "elastic" "${dest}/plugins/swipe/skins/${skin}"

	# Fetch managesieve config
	#ln -s "../../config/managesieve.conf" "${dest}/plugins/managesieve/config.inc.php"
	#ln -s "elastic" "${dest}/plugins/managesieve/skins/${skin}"

	# Apply Jesper's patch
	#echo "${MANAGESIEVE_PATCH}" | sed -e "s/app.sol.dk/${dest}/g" | patch -p 0

	return 0
}

#######################################
#	Fetch/Update skin
#	Link from rc_root
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_skin() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_skin dest"
		return 1
	fi

	local readonly dest="${1}"
	local readonly deploy_key="$(pwd)/deploy_keys/mailcore_deploy_skin"

	echo -e "\nUpdating skins:"

	# Update if the plugin exists, clone otherwise
	mkdir -p repos/
	if [[ -d repos/RC-Skin/ ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C repos/RC-Skin/ pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RC-Skin.git repos/RC-Skin/
	fi

	# Link each $dest/skins/x to in repos/RC-Skin/skins/x
	for f in `command ls -d repos/RC-Skin/skins/*`; do
		# $f = repos/RC-Skin/skins/sol
		# $s = sol

		# Skin name
		local s=$(echo "${f}" | rev | cut -d'/' -f1 | rev)

		# Create link if it doesn't exist in $dest/skins
		[[ ! -d "${dest}/skins/${s}/" ]] && ln -s "../../${f}" "${dest}/skins/${s}"
	done

	return 0
}

#######################################
#	Fetch/Update lang
#	Link from rc_root
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_lang() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_skin dest"
		return 1
	fi

	echo -e "\nUpdating langs:"

	local readonly dest="${1}"
	local readonly deploy_key="$(pwd)/deploy_keys/mailcore_deploy_lang"

	# Fetch product_name, either from 'config.inc.php' or from 'custom.inc.php'. If none is found: abort
	for f in config custom; do
		# Get skin from $f.inc.php
		[[ -f "config/${dest}/${f}.inc.php" ]] && \
			local readonly temp=$(cat "config/${dest}/${f}.inc.php" | grep "'product_name'" | cut -d"'" -f4)

		# If temp is not empty, use it
		[[ ! -z "${temp}" ]] && \
			local readonly product_name="${temp}"
	done

	[[ -z "${product_name}" ]] && err "Error: product_name could not be found" && return 2

	# Update if the plugin exists, clone otherwise
	mkdir -p repos/
	if [[ -d repos/RC-Lang/ ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C repos/RC-Lang/ pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RC-Lang.git repos/RC-Lang/
	fi

	# Link changed files from rc_root
	for f in `find repos/RC-Lang/ -type f -not -path "repos/RC-Lang/.git*"`; do
		# $f = repos/RC-Lang/dir/file
		# $to = $dest/dir/file
		local to="${dest}/$(echo ${f} | cut -d'/' -f3-)"

		# Backup original
		[[ ! -f "${to}.original" ]] && mv "${to}" "${to}.original"

		# Remove previous and copy original
		[[ -f "${to}" ]] && rm "${to}"
		cp "${to}.original" "${to}"

		# Append custom lang entries
		cat "${f}" >> "${to}"

		# Update product_name
		sed -i "s/product_name/${product_name}/g" "${to}"
	done

	return 0
}

#######################################
#	Fetch/Update plugin and link from rc_root
#
#	Arguments:
#		dest (string): rc_root name
#		repo (string): name of plugin repo
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_plugin() {
	if [[ "${#}" -lt 2 ]] || [[ "${#}" -gt 3 ]]; then
		err "Error: invalid number of arguments"
		err "Usage: get_plugin dest repo [branch]"
		return 1
	fi

	local readonly dest="${1}"
	local readonly repo="${2}" # RC-Plugin-xxx
	local readonly plugin_name=$(echo "${repo}" | cut -d'-' -f3) # xxx
	local readonly deploy_key="$(pwd)/deploy_keys/mailcore_deploy_${plugin_name}"
	[[ "${#}" -eq 3 ]] && local branch="${3}" || local branch="master"

	echo -e "\nUpdating ${2}:"

	# Update if the plugin exists, clone otherwise
	mkdir -p repos/
	if [[ -d "repos/${repo}" ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C "repos/${repo}" pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone -b "${branch}" "git@github.com:Fjordmail/${repo}.git" "repos/${repo}"
	fi

	# Install plugin to rc_root with a link
	[[ -f "${dest}/plugins/${plugin_name}" ]] && rm "${dest}/plugins/${plugin_name}"
	[[ -L "${dest}/plugins/${plugin_name}" ]] && rm "${dest}/plugins/${plugin_name}"
	[[ -d "${dest}/plugins/${plugin_name}" ]] && rm -rf "${dest}/plugins/${plugin_name}"
	ln -s "../../repos/${repo}" "${dest}/plugins/${plugin_name}"

	return 0
}

#######################################
#	Check if current plugins/raim-$dest if up to date
#	If not:
#		- Delete old
#		- Build
#		- Link from rc_root
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_raim() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_raim dest"
		return 1
	fi

	echo -e "\nUpdating RAIM:"

	local readonly dest="${1}"
	local readonly deploy_key="$(pwd)/deploy_keys/mailcore_deploy_raim"

	# Check if raim is out of date or not existant
	if should_be_updated "repos/raim-${dest}"; then
		# Delete existing
		rm -rf "repos/raim-${dest}"
		rm -rf "${dest}/password-reset"
		rm -rf "${dest}/registration"

		# Fetch latest
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone -b master git@github.com:Fjordmail/RAIM.git "repos/raim-${dest}"

		# Fetch raim config
		ln -s "../../../../../config/${dest}/raim_shared_config.js" "repos/raim-${dest}/packages/shared/src/config.js"
		ln -s "../../../../config/${dest}/raim_registration.env" "repos/raim-${dest}/packages/registration/.env"
		ln -s "../../../../config/${dest}/raim_password-reset.env" "repos/raim-${dest}/packages/password-reset/.env"

		# Build
		pushd "repos/raim-${dest}"
		yarn install
		yarn build
		popd
	else
		echo "Already up to date."
	fi

	# Install plugin to rc_root with links
	[[ ! -L "${dest}/password-reset" ]] && ln -s "../repos/raim-${dest}/packages/password-reset/build" "${dest}/password-reset"
	[[ ! -L "${dest}/registration" ]] && ln -s "../repos/raim-${dest}/packages/registration/build" "${dest}/registration"

	return 0
}

#######################################
#	Fetch/Update RC-Plugin-recurrent
#	Create required links
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_recurrent() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_recurrent dest"
		return 1
	fi

	echo -e "\nUpdating RC-Plugin-recurrent:"

	local readonly dest="${1}"
	local readonly deploy_key="$(pwd)/deploy_keys/mailcore_deploy_recurrent"

	# Remove links, so the local repo can be updated
	[[ -L "repos/RC-Plugin-recurrent-${dest}/vendor/Config.php" ]] && rm "repos/RC-Plugin-recurrent-${dest}/vendor/Config.php"
	[[ -L "repos/RC-Plugin-recurrent-${dest}/vendor/spa" ]] && rm "repos/RC-Plugin-recurrent-${dest}/vendor/spa"

	# Fetch latest
	if [[ -d "repos/RC-Plugin-recurrent-${dest}" ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C "repos/RC-Plugin-recurrent-${dest}" pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RC-Plugin-recurrent.git "repos/RC-Plugin-recurrent-${dest}"
	fi

	# Recreate the links
	ln -s "../../../config/${dest}/recurrent-Config.php" "repos/RC-Plugin-recurrent-${dest}/vendor/Config.php"
	ln -s "../../raim-${dest}/packages/account/build" "repos/RC-Plugin-recurrent-${dest}/vendor/spa"

	# Install plugin to rc_root/plugins
	[[ ! -L "${dest}/plugins/recurrent" ]] && ln -s "../../repos/RC-Plugin-recurrent-${dest}" "${dest}/plugins/recurrent"

	return 0
}

#######################################
#       Check if local git repo is up to date with remote
#
#       Arguments:
#               repo (string): repo path
#       Returns:
#               0 if it should be updated
#               1 otherwise
#######################################
function should_be_updated() {
        if [ "${#}" -ne 1 ]; then
                err "Error: no argument provided"
                err "Usage: should_be_updated repo"
                return 1
        fi

        local readonly repo="${1}"

        [[ ! -d "${repo}" ]] && return 0
        [[ ! -d "${repo}/.git" ]] && return 0
        [[ "$(git --git-dir=${repo}/.git/ status -uno | grep -c 'Your branch is up to date with ')" -ne 1 ]] && return 0

        return 1
}

# Print to stderr
function err() {
	echo "${*}" >&2
}

# Jesper's managiesieve patch to disable the redirect action as an ext
readonly MANAGESIEVE_PATCH="--- app.sol.dk/plugins/managesieve/lib/Roundcube/rcube_sieve_engine.php	2021-02-08 20:29:40.000000000 +0100
+++ app.sol.dk/plugins/managesieve/lib/Roundcube/rcube_sieve_engine.new.php	2021-04-26 21:44:01.906015211 +0200
@@ -2102,8 +2102,9 @@
             \$select_action->add(\$this->plugin->gettext('messagemoveto'), 'fileinto');
         if (in_array('fileinto', \$this->exts) && in_array('copy', \$this->exts))
             \$select_action->add(\$this->plugin->gettext('messagecopyto'), 'fileinto_copy');
-        \$select_action->add(\$this->plugin->gettext('messageredirect'), 'redirect');
-        if (in_array('copy', \$this->exts))
+        if (in_array('redirect', \$this->exts))
+            \$select_action->add(\$this->plugin->gettext('messageredirect'), 'redirect');
+        if (in_array('redirect', \$this->exts) && in_array('copy', \$this->exts))
             \$select_action->add(\$this->plugin->gettext('messagesendcopy'), 'redirect_copy');
         if (in_array('reject', \$this->exts))
             \$select_action->add(\$this->plugin->gettext('messagediscard'), 'reject');
"

main "${@}"; exit
