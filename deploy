#!/bin/bash
set -e
#set -x

#######################################
#	Check if webmail need to be updated
#	Check if plugins need to be updated
#	Backs up current webmail if it need to be updated
#
#	Arguments:
#		repo (string): repo name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function main() {
	local readonly USAGE="Usage: ./deploy repo"
	declare -a repos=("Sol.dk-RC" "Wemail-RC")

	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "${USAGE}"
		err "Available repo:"
		printf '\t%s\n' "${repos[@]}"
		return 1
	fi

	# In Bash, it's easy to check if an array contains an element
	if [[ ! ${repos[*]} =~ (^|[[:space:]])"${1}"($|[[:space:]]) ]]; then
		err "Error: invalid argument provided. Available repo:"
		printf '\t%s\n' "${repos[@]}"
		return 1
	fi

	# Set correct destination folder, depending on $1
	if [ "${1}" == "Sol.dk-RC" ]; then
		local readonly dest="app.sol.dk"
	elif [ "${1}" == "Wemail-RC" ]; then
		local readonly dest="app.wemail.no"
	else
		err "Error: invalid argument provided"
		err "This should not appear"
		return 1
	fi

	echo -e "UPDATING WEBMAIL: ${dest}\n"

	# Fetch/update webmail
	get_rc "${dest}" "${1}"
	get_skin "${dest}"

	# Fetch/update plugins
	get_plugin "${dest}" RC-Plugin-wblist
	get_plugin "${dest}" RC-Plugin-spamlevel
	get_raim "${dest}"
	get_recurrent "${dest}"

	# Fix permissions
	sudo chown -R www-data:www-data "${dest}" config/ plugins/
	sudo chmod -R ug+rwx "${dest}" config/ plugins/

	return 0
}

#######################################
#	Check if current webmail if up to date
#	If not:
#		- Delete old
#		- Fetch new
#
#	Arguments:
#		dest (string): rc_root name
#		repo (string): name of remote repo
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_rc() {
	if [ "${#}" -ne 2 ]; then
		err "Error: missing arguments"
		err "Usage: get_rc dest repo"
		return 1
	fi

	local readonly dest="${1}"
	local readonly repo="${2}"

	echo "Updating Roundcube:"

	# Check if deloy key is found
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_${repo}"
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	local readonly latest=$(curl --silent "https://api.github.com/repos/roundcube/roundcubemail/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')
	local readonly current=$(cat "${dest}/CHANGELOG" | grep RELEASE | head -1 | cut -d' ' -f2)

	# Update Roundcube if current is either outdated or nonexistant
	if [[ -z "${current}" ]] || [[ "${latest}" != "${current}" ]]; then
		[[ -d "${dest}" ]] && mv "${dest}" "${dest}.bak-$(date +'%Y-%m-%d--%H-%M')"

		wget -c "https://github.com/roundcube/roundcubemail/releases/download/${latest}/roundcubemail-${latest}-complete.tar.gz" -O - | tar -xz
		mv "roundcubemail-${latest}" "${dest}"
		chmod -R ug+rw "${dest}/temp" "${dest}/logs"
		rm -rf "${dest}/installer"

		# Fetch config
		[[ -d "${dest}/config" ]] && rm -rf "${dest}/config"
		ln -s "../config/${dest}/" "${dest}/config"
	else
		echo "Already up to date."
	fi

	return 0
}

#######################################
#	Get skin and language file
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_skin() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_skin dest"
		return 1
	fi

	local readonly dest="${1}"
	echo -e "\nUpdating skin and lang:"

	# Check if passed dest exists
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deploy key is found
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_skin_${dest}"
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Update if the plugin exists, clone otherwise
	mkdir -p skins/
	if [[ -d "skins/${dest}" ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C "skins/${dest}" pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone "git@github.com:Fjordmail/RC-Skin-${dest}.git" "skins/${dest}"
	fi

	# Link changed files from rc_root to skins/$dest
	for f in `find "skins/${dest}/" -type f -not -path "skins/${dest}/.git*"`; do
		# $f = skins/app.sol.dk/file
		# $to = app.sol.dk/file
		local to=$(echo "${f}" | cut -d'/' -f2-)

		# If $to is not a link but an existing file (= original from RC) -> back up
		[[ ! -L "${to}" ]] && [[ -f "${to}" ]] && mv "${to}" "${to}.original"

		# Otherwise, if $to is already a link -> skip. If not, create link
		[[ ! -L "${to}" ]] && ln -s "/www/${f}" "${to}"
	done

	return 0
}

#######################################
#	Check if current plugin is up to date
#	If not:
#		- Delete old
#		- Fetch new
#		- Link from rc_root/plugins/wblist
#
#	Arguments:
#		dest (string): rc_root name
#		repo (string): name of plugin repo
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_plugin() {
	if [ "${#}" -ne 2 ]; then
		err "Error: no argument provided"
		err "Usage: get_plugin dest repo"
		return 1
	fi

	local readonly dest="${1}"
	local readonly repo="${2}" # RC-Plugin-xxx
	local readonly plugin_name=$(echo "${repo}" | cut -d'-' -f3) # xxx
	
	echo -e "\nUpdating ${2}:"

	# Check if passed dest exists
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deploy key is found
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_${plugin_name}"
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Update if the plugin exists, clone otherwise
	mkdir -p plugins/
	if [[ -d "plugins/${repo}" ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C "plugins/${repo}" pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone "git@github.com:Fjordmail/${repo}.git" "plugins/${repo}"
	fi

	# Install plugin to rc_root with a link
	[[ ! -L "${dest}/plugins/${plugin_name}" ]] && ln -s "../../plugins/${repo}" "${dest}/plugins/${plugin_name}"

	return 0
}

#######################################
#	Check if current plugins/raim-$dest if up to date
#	If not:
#		- Delete old
#		- Build
#		- Link
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_raim() {
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_raim"

	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_raim dest"
		return 1
	fi

	echo -e "\nUpdating RAIM:"

	# Check if passed dest exists
	local readonly dest="${1}"
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deloy key is found
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Check if raim is out of date or not existant
	if should_be_updated "plugins/raim-${dest}"; then
		# Delete existing
		rm -rf "plugins/raim-${dest}"
		rm -rf "${dest}/instance/password-reset"
		rm -rf "${dest}/instance/registration"

		# Fetch latest
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RAIM.git "plugins/raim-${dest}"

		# Fetch raim config
		ln -s "../../../../../config/${dest}/raim_shared_config.js" "plugins/raim-${dest}/packages/shared/src/config.js"
		ln -s "../../../../config/${dest}/raim_registration.env" "plugins/raim-${dest}/packages/registration/.env"
		ln -s "../../../../config/${dest}/raim_password-reset.env" "plugins/raim-${dest}/packages/password-reset/.env"

		# Build
		cd "plugins/raim-${dest}"
		yarn install
		yarn build
		cd ../../
	else
		echo "Already up to date."
	fi

	# Install plugin to rc_root with links
	mkdir -p "${dest}/instance/"
	[[ ! -L "${dest}/instance/password-reset" ]] && ln -s "../../plugins/raim-${dest}/packages/password-reset/build" "${dest}/instance/password-reset"
	[[ ! -L "${dest}/instance/registration" ]] && ln -s "../../plugins/raim-${dest}/packages/registration/build" "${dest}/instance/registration"

	return 0
}

#######################################
#	Get and update recurrent plugin
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_recurrent() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_recurrent dest"
		return 1
	fi

	local readonly dest="${1}"
	echo -e "\nUpdating RC-Plugin-recurrent:"

	# Check if passed dest exists
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deploy key is found
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_recurrent"
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Remove links, so the local repo can be updated
	[[ -L "plugins/RC-Plugin-recurrent-${dest}/vendor/Config.php" ]] && rm "plugins/RC-Plugin-recurrent-${dest}/vendor/Config.php"
	[[ -L "plugins/RC-Plugin-recurrent-${dest}/vendor/spa" ]] && rm "plugins/RC-Plugin-recurrent-${dest}/vendor/spa"

	# Fetch latest
	if [[ -d "plugins/RC-Plugin-recurrent-${dest}" ]]; then
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git -C "plugins/RC-Plugin-recurrent-${dest}" pull
	else
		GIT_SSH_COMMAND="ssh -i '${deploy_key}' -o IdentitiesOnly=yes" \
			git clone "git@github.com:Fjordmail/RC-Plugin-recurrent.git" "plugins/RC-Plugin-recurrent-${dest}"
	fi

	# Recreate the links
	ln -s "../../../config/${dest}/recurrent-Config.php" "plugins/RC-Plugin-recurrent-${dest}/vendor/Config.php"
	ln -s "../../raim-${dest}/packages/account/build" "plugins/RC-Plugin-recurrent-${dest}/vendor/spa"

	# Install plugin to rc_root/plugins
	[[ ! -L "${dest}/plugins/recurrent" ]] && ln -s "../../plugins/RC-Plugin-recurrent-${dest}" "${dest}/plugins/recurrent"

	return 0
}

#######################################
#       Check if local git repo is up to date with remote
#
#       Arguments:
#               repo (string): repo path
#       Returns:
#               0 if it should be updated
#               1 otherwise
#######################################
function should_be_updated() {
        if [ "${#}" -ne 1 ]; then
                err "Error: no argument provided"
                err "Usage: should_be_updated repo"
                return 1
        fi

        local readonly repo="${1}"

        [[ ! -d "${repo}" ]] && return 0
        [[ ! -d "${repo}/.git" ]] && return 0
        [[ "$(git --git-dir=${repo}/.git/ status -uno | grep -c 'Your branch is up to date with ')" -ne 1 ]] && return 0

        return 1
}

# Print to stderr
function err() {
	echo "${*}" >&2
}

main "${@}"; exit
