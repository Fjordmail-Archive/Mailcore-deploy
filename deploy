#!/bin/bash
set -e

#######################################
#	Check if webmail need to be updated
#	Check if plugins need to be updated
#	Backs up current webmail if it need to be updated
#
#	Arguments:
#		repo (string): repo name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function main() {
	local readonly USAGE="Usage: ./deploy repo"
	declare -a repos=("Sol.dk-RC" "Wemail-RC")

	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "${USAGE}"
		err "Available repo:"
		printf '\t%s\n' "${repos[@]}"
		return 1
	fi

	# In Bash, it's easy to check if an array contains an element
	if [[ ! ${repos[*]} =~ (^|[[:space:]])"${1}"($|[[:space:]]) ]]; then
		err "Error: invalid argument provided. Available repo:"
		printf '\t%s\n' "${repos[@]}"
		return 1
	fi

	# Set correct destination folder, depending on $1
	if [ "${1}" == "Sol.dk-RC" ]; then
		local readonly dest="app.sol.dk"
	elif [ "${1}" == "Wemail-RC" ]; then
		local readonly dest="app.wemail.no"
	else
		err "Error: invalid argument provided"
		err "This should not appear"
		return 1
	fi

	# Fetch/update webmail
	get_rc "${dest}" "${1}"

	# Fetch/update plugins
	mkdir -p plugins
	get_config "${dest}"
	get_wblist "${dest}"
	get_raim "${dest}"
	get_recurrent "${dest}"

	# Fix permissions
	sudo chown -R www-data:www-data "${dest}" config/ plugins/
	sudo chmod -R ug+rwx "${dest}" config/ plugins/
}

#######################################
#	Check if current webmail if up to date
#	If not:
#		- Delete old
#		- Fetch new
#
#	Arguments:
#		dest (string): rc_root name
#		repo (string): name of remote repo
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_rc() {
	if [ "${#}" -ne 2 ]; then
		err "Error: missing arguments"
		err "Usage: get_rc dest repo"
		return 1
	fi

	local readonly dest="${1}"
	local readonly repo="${2}"
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_${repo}"

	# Check if passed dest exists
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deloy key is found
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# If current webmail does not exist or is outdated
	if [[ "$(should_be_updated \"${dest}\")" -eq 1 ]]; then
		# Backup old folder
		[[ -d "${dest}" ]] && mv "${dest}" "${dest}.bak-$(date +'%Y-%m-%d--%H-%M')"

		# Fetch new webmail from GitHub
		GIT_SSH_COMMAND="ssh -i ${deploy_key} -o IdentitiesOnly=yes" \
			git clone "git@github.com:Fjordmail/${repo}.git" "${dest}"

		# Remove potential included plugins
		rm -rf "${dest}/plugins/wblist"
		rm -rf "${dest}/plugins/recurrent"
		rm -rf "${dest}/raim"
		rm -rf "${dest}/instance/password-reset"
		rm -rf "${dest}/instance/registration"
	else
		echo "Webmail is up to date. Skipping..."
	fi

	return 0
}

#######################################
#	Set symlink to config:
#		app.sol.dk/config -> config/app.sol.dk/
#		app.wemail.no/config -> config/app.wemail.no/
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_config() {
	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_config dest"
		return 1
	fi

	# Check if passed dest exists
	local readonly dest="${1}"
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if config/dest exists
	if [[ ! -d "config/${dest}/" ]]; then
		err "Error: config at config/"${dest}"/ does not exist"
		return 1
	fi

	# Remove old rc_root/config
	[[ -d "${dest}/config" ]] && rm -rf "${dest}/config"

	ln -s "../config/${dest}/" "${dest}/config"

	return 0
}

#######################################
#	Check if current plugins/RC-Plugin-wblist if up to date
#	If not:
#		- Delete old
#		- Fetch new
#		- Link from rc_root/plugins/wblist
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_wblist() {
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_wblist"

	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_wblist dest"
		return 1
	fi

	# Check if passed dest exists
	local readonly dest="${1}"
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deloy key is found
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Check if shared plugin is out of date
	if [[ "$(should_be_updated \"plugins/RC-Plugin-wblist\")" -eq 1 ]]; then
		# wblist: remove existing
		rm -rf "${dest}/plugins/wblist/"
		rm -rf plugins/RC-Plugin-wblist/

		# Fetch latest
		GIT_SSH_COMMAND="ssh -i ${deploy_key} -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RC-Plugin-wblist.git plugins/RC-Plugin-wblist
	else
		echo "Wblist is up to date. Skipping..."
	fi

	# Install plugin to rc_root with a link
	[[ ! -L "${dest}/plugins/wblist" ]] && ln -s "../../plugins/RC-Plugin-wblist" "${dest}/plugins/wblist"

	return 0
}

#######################################
#	Check if current plugins/raim-$dest if up to date
#	If not:
#		- Delete old
#		- Build
#		- Link
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_raim() {
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_raim"

	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_raim dest"
		return 1
	fi

	# Check if passed dest exists
	local readonly dest="${1}"
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deloy key is found
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Check if raim is out of date or not existant
	if [[ "$(should_be_updated \"plugins/raim-${dest}\")" -eq 1 ]]; then
		# Delete existing
		rm -rf "plugins/raim-${dest}"
		rm -rf "${dest}/instance/password-reset"
		rm -rf "${dest}/instance/registration"

		# Fetch latest
		GIT_SSH_COMMAND="ssh -i ${deploy_key} -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RAIM.git "plugins/raim-${dest}"

		# Fetch raim config
		ln -s "../../../../../config/${dest}/raim_shared_config.js" "plugins/raim-${dest}/packages/shared/src/config.js"
		ln -s "../../../../config/${dest}/raim_registration.env" "plugins/raim-${dest}/packages/registration/.env"
		ln -s "../../../../config/${dest}/raim_password-reset.env" "plugins/raim-${dest}/packages/password-reset/.env"

		# Build
		cd "plugins/raim-${dest}"
		yarn install
		yarn build
		cd ../../
	else
		echo "RAIM is up to date. Skipping..."
	fi

	# Install plugin to rc_root with links
	mkdir "${dest}/instance/"
	[[ ! -L "${dest}/instance/password-reset" ]] && ln -s "plugins/raim-${dest}/packages/password-reset/build" "${dest}/instance/password-reset"
	[[ ! -L "${dest}/instance/registration" ]] && ln -s "plugins/raim-${dest}/packages/registration/build" "${dest}/instance/registration"

	return 0
}

#######################################
#	Check if current plugins/RC-Plugin-Recurrent-$dest if up to date
#	If not:
#		- Delete old
#		- Build
#		- Link
#
#	Arguments:
#		dest (string): rc_root name
#	Returns:
#		1 upon error
#		0 upon success
#######################################
function get_recurrent() {
	local readonly deploy_key="/www/deploy_keys/mailcore_deploy_recurrent"

	if [ "${#}" -ne 1 ]; then
		err "Error: no argument provided"
		err "Usage: get_recurrent dest"
		return 1
	fi

	# Check if passed dest exists
	local readonly dest="${1}"
	if [[ ! -d "${dest}" ]]; then
		err "Error: destination folder does not exist"
		return 1
	fi

	# Check if deloy key is found
	if [[ ! -f "${deploy_key}" ]]; then
		err "Error: deploy key for was not found: ${deploy_key}"
		return 1
	fi

	# Check if recurrent plugin is out of date
	if [[ "$(should_be_updated \"plugins/RC-Plugin-Recurrent-${dest}\")" -eq 1 ]]; then
		# Recurrent: remove existing
		rm -rf "${dest}/plugins/recurrent/"
		rm -rf "plugins/RC-Plugin-Recurrent-${dest}/"

		# Fetch latest
		GIT_SSH_COMMAND="ssh -i ${deploy_key} -o IdentitiesOnly=yes" \
			git clone git@github.com:Fjordmail/RC-Plugin-Recurrent.git "plugins/RC-Plugin-Recurrent-${dest}"

		# Fetch config
		ln -s "../../../config/${dest}/recurrent-Config.php" "plugins/RC-Plugin-Recurrent-${dest}/vendor/Config.php"
	else
		echo "Recurrent plugin is up to date. Skipping..."
	fi

	# Install plugin to rc_root and fetch config
	[[ ! -L "${dest}/plugins/recurrent" ]] && ln -s "../../plugins/RC-Plugin-Recurrent" "${dest}/plugins/recurrent"
	[[ ! -L "${dest}/plugins/recurrent/vendor/spa" ]] && ln -s "../../plugins/raim-${dest}/packages/account/build" "${dest}/plugins/recurrent/vendor/spa"

	return 0
}

#######################################
#       Check if local git repo is up to date with remote
#
#       Arguments:
#               repo (string): repo path
#       Output:
#               1 if it should be updated
#               0 otherwise
#       Returns:
#               1 upon success
#               0 upon error
#######################################
function should_be_updated() {
        if [ "${#}" -ne 1 ]; then
                err "Error: no argument provided"
                err "Usage: should_be_updated repo"
                return 1
        fi

        local readonly repo="${1}"

        [[ ! -d "${repo}" ]] && echo 1 && return 0
        [[ ! -d "${repo}/.git" ]] && echo 1 && return 0
        [[ "$(git --git-dir=${repo}/.git/ status -uno | grep -c 'Your branch is up to date with ')" -ne 1 ]] && echo 1 && return 0

        return 0
}

# Print to stderr
function err() {
	echo "${*}" >&2
}

# Todo:
# - Check if links are valid with test -e

main "${@}"; exit
